#!/usr/bin/env python

import os
import appdirs
import click
import uuid

import seq2simulate.package
import seq2simulate.settings

def get_working_dir():
    """
    Returns a default working directory.
    """

    return os.path.join(
        appdirs.user_data_dir('tests', 'simulated'), 
        str(uuid.uuid4())
    )

@click.command()

@click.option(
    '--folder', 
    help='Path to the input folder of separate sequence files.', 
    type=click.Path(exists=True, readable=True, resolve_path=True)
)

@click.option(
    '--platform',
    help='Sequencing platform to package data as.',
    type=click.Choice(['illumina', 'illumina-paired', 'ion', 'roche'])
)

@click.option(
    '--mid-file', 
    help='Path to the input folder of separate sequence files.', 
    type=click.Path(exists=True, readable=True, resolve_path=True)
)

def run(folder, platform, mid_file):
    """
    Parse command line arguments and start the packager.
    """

    if folder is None:
        raise ValueError(
            'Need an input folder containing 1 or more fastq files.'
        )

    if platform == 'illumina':
        settings = {"platform": 1}
        samples = seq2simulate.package.illumina_single(
            folder
        )
    elif platform == 'illumina-paired':
        settings = {"platform": 1, "paired": True}
        samples = seq2simulate.package.illumina_paired(
            folder
        )
    elif platform == 'ion':
        settings = {"platform": 0}
        samples = seq2simulate.package.ion(
            folder
        )
    elif platform == 'roche':
        if mid_file is None:
            raise ValueError('Need an MID file to package a roche job.')

        settings = {"platform": 2}
        samples = seq2simulate.package.roche(
            folder, mid_file
        )
    else:
        raise ValueError('Invalid platform ' + platform + '.')

    seq2simulate.settings.write_settings(folder, settings, samples)

if __name__ == '__main__':
    run(auto_envvar_prefix='SIMULATE')